#!/usr/bin/env bash

PRIMARY_DISPLAY='eDP-1'

open_desktop() {
    screen_id=$1
    echo "Opening on $screen_id"

    window="desktop"
    if [[ $screen_id == $PRIMARY_DISPLAY ]]; then
        window="desktop-clock"
    fi

    # Check if the window is already open on the screen
    open_state=$(eww active-windows | grep -w "$screen_id: $window")

    if [[ ! -z $open_state ]]; then
        echo "Already open"
        return
    fi

    # Open the specified window on the screen
    eww open --screen "$screen_id" --id "$screen_id" $window
}

close_desktop() {
    screen_id=$1
    echo "Closing window on $screen_id"
    eww close "$screen_id"
}

handle_monitor() {
    ACTIVE=$(eww active-windows)
    MONITORS=$(swaymsg -t get_outputs | jq -r '.[].name')

    while IFS= read -r active; do
        IFS=': ' read -r active_id window_name <<< "$active"

        found=false
        while IFS= read -r screen_id; do
            [[ $screen_id == $active_id ]] && found=true
        done <<< "$MONITORS"

        if [[ $found == false ]]; then
            echo "$active_id has been removed"
            close_desktop "$active_id"
        fi
    done <<< "$ACTIVE"

    while IFS= read -r screen_id; do
        open_desktop "$screen_id"
    done <<< "$MONITORS"
}

window_title() {
    echo $(swaymsg -t get_tree | jq -r '.. | select(.type? == "con" and .focused == true).name')
}

get_workspaces() {
    swaymsg -t get_tree | jq '
        [
            .nodes[] as $output
            | $output.nodes[]
            | recurse(.nodes[] | objects)
            | select(.type == "workspace")
            | {
                id: .name,
                screen: $output.name,
                windows: (
                [ .. | objects | select(.type == "con" and .name?) ] | length
                )
            }
        ]
        '
}

if [[ $1 == 'workspaces' ]]; then
    # Initial workspace data
    eww update workspaces="{ \"workspaces\": $(get_workspaces), \"active\": 1, \"active_empty\": true }"
    active_empty='true'

    swaymsg -m -t subscribe '["workspace","window"]' | while read -r line; do
        active=$(swaymsg -t get_workspaces | jq -r 'map(select(.focused))[0].name')
        active_monitor=$(swaymsg -t get_workspaces | jq -r 'map(select(.focused))[0].output')
        workspaces=$(get_workspaces)

        if [[ $active_monitor == $PRIMARY_DISPLAY ]]; then
            active_empty='true'

            let "i = $active"
            if [[ $(echo $workspaces | jq --raw-output ".[] | select(.id == \"$i\") | .windows") == 0 ]]; then
                active_empty='false'
            fi
        fi

        eww update workspaces="{\"workspaces\": $workspaces,\"active\": $active,\"active_empty\": $active_empty}"
    done
fi

if [[ $1 == 'window' ]]; then
    window_title
    socat -u UNIX-CONNECT:$SWAYSOCK - | while read -r line; do
        window_title
    done
elif [[ $1 == 'monitor' ]]; then
    # Initialize existing monitors
    handle_monitor

    swaymsg -m -t subscribe '["output"]' | while read -r line; do
        handle_monitor
    done
fi